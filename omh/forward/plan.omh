// $Id$
/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-15 Bradley M. Bell

CppAD is distributed under multiple licenses. This distribution is under
the terms of the
                    Eclipse Public License Version 1.0.

A copy of this license is included in the COPYING file of this distribution.
Please visit http://www.coin-or.org/CppAD/ for information on other licenses.
-------------------------------------------------------------------------- */
$begin compare_change_plan$$
$spell 
	op
	const
$$

$section Plan: Comparison Changes Between Taping and Zero Order Forward$$

$index ADFun, compare_change$$
$index compare_change, ADFun$$
$index zero, order forward$$
$index forward, zero order$$

$head Syntax$$
$icode%number% = %f%.compare_change_number()
%$$
$icode%f%.compare_change_set(%count%)
%$$
$icode%op_index% = %f%.compare_change_op_index()

%$$
$bold See Also$$
$cref FunCheck$$


$head Purpose$$
We use $latex F : B^n \rightarrow B^m$$ to denote the
$cref/AD function/glossary/AD Function/$$ corresponding to $icode f$$; i.e,
given $latex x \in B^n$$, $latex F(x)$$ is defined by
$codei%
	%F%(%x%) = %f%.Forward(0, %x%)
%$$
see $cref forward_zero$$. 
If $latex x$$ is such that
all the algorithm $cref/comparison/Compare/$$ operations
have the same result as when the algorithm was taped,
The function $latex F(x)$$ and the algorithm will have the same values.
(This is a sufficient, but not necessary condition).


$head f$$
In the $code compare_change_number$$ and $code compare_change_op_index$$
syntax, the object $icode f$$ has prototype
$codei%
	const ADFun<%Base%> %f%
%$$
In the $code compare_change_set$$ 
syntax, the object $icode f$$ has prototype
$codei%
	ADFun<%Base%> %f%
%$$

$head number$$
The return value $icode number$$ has prototype
$codei%
	size_t %number%
%$$
It is the number of 
$codei%AD<%Base%>%$$ $cref/comparison/Compare/$$ operations,
corresponding to the previous call to $cref forward_zero$$ 
$codei%
	%f%.Forward(0, %x%)
%$$
that have a different result for this value of $icode x$$
than the value used when $icode f$$ was created by taping an algorithm.
If $icode number$$ is non-zero,
you may want to re-tape the algorithm with the
$cref/independent variables/glossary/Tape/Independent Variable/$$
equal to the values in $icode x$$, 
so the AD operation sequence properly represents the algorithm
for this value of independent variables.
On the other hand, re-taping the AD operation sequence usually takes 
significantly more time than evaluation using $cref forward_zero$$.
If the functions values have not changed (see $cref FunCheck$$)
it may not be worth re-taping a new AD operation sequence. 

$head count$$
The argument $icode count$$ has prototype
$icode%
	size_t %count%
%$$ 
It specifies which comparison change should correspond to the
operator index stored during subsequent calls to
$codei%
	%f%.Forward(0, %x%)
%$$
For example, if $icode%count% == 1%$$,
the operator index will correspond to the first comparison change. 
This is the default value used if $icode count$$ is not specified.
The value $icode count$$ must be greater than zero.

$head op_index$$
The return value $icode op_index$$ has prototype
$codei%
	size_t %op_index%
%$$
It is the operator index corresponding the 
$icode count$$-th comparison change during the previous call to
$codei%
	%f%.Forward(0, %x%)
%$$
Note that if $icode count$$ is greater than the corresponding
$icode number$$, there is no such comparison change and $icode op_index$$
will be zero.

$subhead Purpose$$
The operator index can be used to generate an error during the taping
process so that the corresponding algorithm can be inspected.
In some cases, it is possible to re-design this part of the
algorithm to avoid the particular comparison operation.
For example, using an $cref/conditional expression/CondExp/$$ 
may be appropriate in some cases.
See the syntax
$codei%
	Independent(%x%, %op_index%)
%$$
Note that the operator index $icode op_index$$,
must correspond to the original tape,
and not an $cref/optimized/optimize/$$ version of the tape.


$head Deprecated$$
$children%
	omh/forward/compare_change.omh
%$$
The function $cref CompareChange$$ has been deprecated.

$end
